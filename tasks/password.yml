---
#Lookup password for certifs.

#ansible_default
- name: "Create a new password, or get the existing item for {{ ansible_default.username }}"
  block:
  - ansible.builtin.stat:
      path: "{{ keepass.database }}"
    register: kdbx

  - keepass:
      database: "{{ keepass.database }}"
      password: "{{ keepass.passwd | default(omit) }}"
      keyfile: "{{ keepass.keyfile | default(omit) }}"
      password_length: "{{ keepass.length }}"
      purpose: "{{ansible_default.username }}@{{ server.name }}"
      username: "{{ ansible_default.username }}"
    when: kdbx.stat.mimetype is defined and kdbx.stat.mimetype == 'application/octet-stream'
    register: ansible_default_tempo

  - ansible.builtin.set_fact:
      ansible_default:
        username: "{{ ansible_default.username }}"
        password: "{{ ansible_default_tempo.password | default('') }}"
      when: ansible_default_tempo.skipped is not defined

  delegate_to: localhost
  when: ansible_default.password == ''
  ignore_errors: true

- name: "Generate the password if is empty."
  ansible.builtin.set_fact:
    ansible_default:
      username: "{{ ansible_default.username }}"
      password: "{{ lookup('password', '{{ credential_store }}/{{ ansible_default.username }}@{{ server.name }}_secret chars=ascii_letters,digits length=32') }}"
  when:  ansible_default.password == ''


#root_ca_login
- name: "Create a new password, or get the existing item for {{ root_ca_login.username }}"
  block:
  - ansible.builtin.stat:
      path: "{{ keepass.database }}"
    register: kdbx

  - keepass:
      database: "{{ keepass.database }}"
      password: "{{ keepass.passwd | default(omit) }}"
      keyfile: "{{ keepass.keyfile | default(omit) }}"
      password_length: "{{ keepass.length }}"
      purpose: "{{root_ca_login.username }}"
      username: "{{ root_ca_login.username }}"
    when: kdbx.stat.mimetype is defined and kdbx.stat.mimetype == 'application/octet-stream'
    register: root_ca_login_tempo

  - ansible.builtin.set_fact:
      root_ca_login:
        username: "{{ root_ca_login.username }}"
        password: "{{ root_ca_login_tempo.password | default('') }}"
      when: root_ca_login_tempo.skipped is not defined

  delegate_to: localhost
  when: root_ca_login.password == ''
  ignore_errors: true

- name: "Generate the password if is empty."
  ansible.builtin.set_fact:
    root_ca_login:
      username: "{{ root_ca_login.username }}"
      password: "{{ lookup('password', '{{ credential_store }}/{{ root_ca_login.username }}_secret chars=ascii_letters,digits length=32') }}"
  when:  root_ca_login.password == ''

#delegated_ca_login
- name: "Create a new password, or get the existing item for {{ delegated_ca_login.username }}"
  block:
  - ansible.builtin.stat:
      path: "{{ keepass.database }}"
    register: kdbx

  - keepass:
      database: "{{ keepass.database }}"
      password: "{{ keepass.passwd | default(omit) }}"
      keyfile: "{{ keepass.keyfile | default(omit) }}"
      password_length: "{{ keepass.length }}"
      purpose: "{{ delegated_ca_login.username }}"
      username: "{{ delegated_ca_login.username }}"
    when: kdbx.stat.mimetype is defined and kdbx.stat.mimetype == 'application/octet-stream'
    register: delegated_ca_login_tempo

  - ansible.builtin.set_fact:
      delegated_ca_login:
        username: "{{ delegated_ca_login.username }}"
        password: "{{ delegated_ca_login_tempo.password  | default('') }}"
      when: delegated_ca_login_tempo.skipped is not defined

  delegate_to: localhost
  when: delegated_ca_login.password == ''
  ignore_errors: true

- name: "Generate the password if is empty."
  ansible.builtin.set_fact:
    delegated_ca_login:
      username: "{{ delegated_ca_login.username }}"
      password: "{{ lookup('password', '{{ credential_store }}/{{ delegated_ca_login.username }}_secret chars=ascii_letters,digits length=32') }}"
  when:  delegated_ca_login.password == ''


## certificate_login
- name: "Create a new password, or get the existing item for {{ certificate_login.username }}"
  block:
  - ansible.builtin.stat:
      path: "{{ keepass.database }}"
    register: kdbx

  - keepass:
      database: "{{ keepass.database }}"
      password: "{{ keepass.passwd | default(omit) }}"
      keyfile: "{{ keepass.keyfile | default(omit) }}"
      password_length: "{{ keepass.length }}"
      purpose: "{{certificate_login.username }}"
      username: "{{ certificate_login.username }}"
    when: kdbx.stat.mimetype is defined and kdbx.stat.mimetype == 'application/octet-stream'
    register: certificate_login_tempo

  - ansible.builtin.set_fact:
      certificate_login:
        username: "{{ certificate_login.username }}"
        password: "{{ certificate_login_tempo.password | default('') }}"
      when: certificate_login_tempo.skipped is not defined

  delegate_to: localhost
  when: certificate_login.password == ''
  ignore_errors: true

- name: "Generate the password if is empty."
  ansible.builtin.set_fact:
    certificate_login:
      username: "{{ certificate_login.username }}"
      password: "{{ lookup('password', '{{ credential_store }}/{{ certificate_login.username }}_secret chars=ascii_letters,digits length=32') }}"
  when:  certificate_login.password == ''
